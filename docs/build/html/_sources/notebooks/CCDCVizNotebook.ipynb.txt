{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "id": "15b5b935",
      "metadata": {},
      "source": [
        "# CCDC Visualization Notebook\n",
        "   Copyright 2024 Ian Housman\n",
        "\n",
        "   Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "   you may not use this file except in compliance with the License.\n",
        "   You may obtain a copy of the License at\n",
        "\n",
        "       http://www.apache.org/licenses/LICENSE-2.0\n",
        "\n",
        "   Unless required by applicable law or agreed to in writing, software\n",
        "   distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "   See the License for the specific language governing permissions and\n",
        "   limitations under the License.\n",
        "\n",
        "  <p><a href=\"https://colab.research.google.com/github/gee-community/geeViz/blob/master/examples/CCDCVizNotebook.ipynb\" target=\"_parent\"><img alt=\"Open in Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\"></a></p>\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "e57ee268",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initializing GEE\n",
            "Cached project id file path: C:\\Users\\ihousman\\.config\\earthengine\\credentials.proj_id\n",
            "Cached project id: lcms-292214\n",
            "Successfully initialized\n",
            "geeViz package folder: c:\\Users\\ihousman\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\geeViz\n",
            "done\n"
          ]
        }
      ],
      "source": [
        "#Example of how to visualize CCDC outputs using the Python visualization tools\n",
        "#Adds change products and fitted harmonics from CCDC output to the viewer\n",
        "#The general workflow for CCDC is to run the CCDCWrapper.py script, and then either utilize the harmonic model for a given date\n",
        "#or to use the breaks for change detection. All of this is demonstrated in this example\n",
        "####################################################################################################\n",
        "import os,sys\n",
        "sys.path.append(os.getcwd())\n",
        "\n",
        "#Module imports\n",
        "try:\n",
        "    import geeViz.getImagesLib as getImagesLib\n",
        "except:\n",
        "    !python -m pip install geeViz\n",
        "    import geeViz.getImagesLib as getImagesLib\n",
        "\n",
        "\n",
        "import geeViz.changeDetectionLib as changeDetectionLib\n",
        "ee = getImagesLib.ee\n",
        "Map = getImagesLib.Map\n",
        "Map.clearMap()\n",
        "####################################################################################################\n",
        "#Bring in ccdc image asset\n",
        "#This is assumed to be an image of arrays that is returned from the ee.Algorithms.TemporalSegmentation.Ccdc method\n",
        "ccdcImg = ee.ImageCollection('projects/lcms-292214/assets/CONUS-LCMS/Base-Learners/CCDC-Collection-1984-2022')\\\n",
        "          .select(['tStart','tEnd','tBreak','changeProb','red.*','nir.*','swir1.*','swir2.*','NDVI.*','NBR.*']).mosaic()\n",
        "\n",
        "\n",
        "#Specify which harmonics to use when predicting the CCDC model\n",
        "#CCDC exports the first 3 harmonics (1 cycle/yr, 2 cycles/yr, and 3 cycles/yr)\n",
        "#If you only want to see yearly patterns, specify [1]\n",
        "#If you would like a tighter fit in the predicted value, include the second or third harmonic as well [1,2,3]\n",
        "whichHarmonics = [1,2,3]\n",
        "\n",
        "#Whether to fill gaps between segments' end year and the subsequent start year to the break date\n",
        "fillGaps = False\n",
        "\n",
        "#Specify which band to use for loss and gain. \n",
        "#This is most important for the loss and gain magnitude since the year of change will be the same for all years\n",
        "changeDetectionBandName = 'NDVI'\n",
        "\n",
        "# Choose whether to show the most recent ('mostRecent') or highest magnitude ('highestMag') CCDC break\n",
        "sortingMethod = 'mostRecent'\n",
        "####################################################################################################\n",
        "#Pull out some info about the ccdc image\n",
        "startJulian = 1\n",
        "endJulian = 365\n",
        "startYear = 1984\n",
        "endYear = 2022\n",
        "print('done')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "26bdb396",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Raw CCDC Output\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Starting local web server at: http://localhost:1231/geeView/\n",
            "HTTP server command: \"c:\\Users\\ihousman\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m http.server  1231\n",
            "Done\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612xo8NuLiiN-qVOTsN6_fWo8L-qA-KMEypVlah8dd7vv7du6ycGdBpqmXtLmjm4PqyWi6dgovMVT4dJToBYcOWftqXgjoiXqsZvXFt6im8-NCb0hbIW_2jZ9r0N-API6ZLCq6lTUe1GuVK1itP5PcAnD3p9QbBi06-cN9jYaCgYKAe4SARESFQHGX2MiySE5AEDqpNim4FckAreJJg0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612xo8NuLiiN-qVOTsN6_fWo8L-qA-KMEypVlah8dd7vv7du6ycGdBpqmXtLmjm4PqyWi6dgovMVT4dJToBYcOWftqXgjoiXqsZvXFt6im8-NCb0hbIW_2jZ9r0N-API6ZLCq6lTUe1GuVK1itP5PcAnD3p9QbBi06-cN9jYaCgYKAe4SARESFQHGX2MiySE5AEDqpNim4FckAreJJg0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x1bcb266d590>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "Map.port = 1231\n",
        "#Add the raw array image\n",
        "Map.addLayer(ccdcImg,{},'Raw CCDC Output',True)\n",
        "Map.centerObject(ccdcImg)\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n",
        "#Double click on map to see raw CCDC output image array values\n",
        "#Notice it is difficult to interpret these values as a time series since only breaks and their respective harmonic models are stored"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "194029e4",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Loss Year\n",
            "Adding layer: Loss Mag\n",
            "Adding layer: Gain Year\n",
            "Adding layer: Gain Mag\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:1231/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612ymxQGO5RCGsQbYgpf2kcvU3WQ3elAsRecR2Jji0qfK46vnnPdo0QgyfPrej1ZrHgWORgjEjkKpluOW80orIuPQ1fU2eZTEFjNOXUjlrl-9ICejvdczGePj5mkI-1xw1XCAN3ZEbF96d1-Nt_vefr8TNSK-LoZV3tN4qScaCgYKAVsSARESFQHGX2MiHkf20KApp0qbANPl79Relw0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612ymxQGO5RCGsQbYgpf2kcvU3WQ3elAsRecR2Jji0qfK46vnnPdo0QgyfPrej1ZrHgWORgjEjkKpluOW80orIuPQ1fU2eZTEFjNOXUjlrl-9ICejvdczGePj5mkI-1xw1XCAN3ZEbF96d1-Nt_vefr8TNSK-LoZV3tN4qScaCgYKAVsSARESFQHGX2MiHkf20KApp0qbANPl79Relw0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x1bcb1d142d0>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "#We will not look at more useful ways of visualizing CCDC outputs\n",
        "#First, we will extract the change years and magnitude\n",
        "changeObj = changeDetectionLib.ccdcChangeDetection(ccdcImg,changeDetectionBandName);\n",
        "Map.addLayer(changeObj[sortingMethod]['loss']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.lossYearPalette},'Loss Year')\n",
        "Map.addLayer(changeObj[sortingMethod]['loss']['mag'],{'min':-0.5,'max':-0.1,'palette':changeDetectionLib.lossMagPalette},'Loss Mag',False);\n",
        "Map.addLayer(changeObj[sortingMethod]['gain']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.gainYearPalette},'Gain Year');\n",
        "Map.addLayer(changeObj[sortingMethod]['gain']['mag'],{'min':0.05,'max':0.2,'palette':changeDetectionLib.gainMagPalette},'Gain Mag',False);\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n",
        "#Double click on map to see raw years of loss and gain breaks\n",
        "#Notice as you zoom in the layers change since GEE is processing outputs at a given pyramid level"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "4a8031fe",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Fitted CCDC\n",
            "Adding layer: Synthetic Composite Time Lapse 2021\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:1231/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612wbtEFCJRcgwIEIHweAbscLQVN3pU1hhpz1_cSKdDFT5UXNyUiddDVbGE7ZTEaKYb98zLFj2kBaM__PXriFTg97tZw0SJir4lCz1swGB3rtWtovOJt5-b5yqEzd_PbMhmALJpI-D_DLNIDZUlUvMOMET66riLwr8yEEtoUaCgYKAeISARESFQHGX2MiZY0Ncr5vViST6RwaQLC9-A0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AcM612wbtEFCJRcgwIEIHweAbscLQVN3pU1hhpz1_cSKdDFT5UXNyUiddDVbGE7ZTEaKYb98zLFj2kBaM__PXriFTg97tZw0SJir4lCz1swGB3rtWtovOJt5-b5yqEzd_PbMhmALJpI-D_DLNIDZUlUvMOMET66riLwr8yEEtoUaCgYKAeISARESFQHGX2MiZY0Ncr5vViST6RwaQLC9-A0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x1bcb3048cd0>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "#Apply the CCDC harmonic model across a time series\n",
        "#First get a time series of time images \n",
        "yearImages = changeDetectionLib.getTimeImageCollection(startYear,endYear,startJulian,endJulian,0.1);\n",
        "\n",
        "#Then predict the CCDC models\n",
        "fitted = changeDetectionLib.predictCCDC(ccdcImg,yearImages,fillGaps,whichHarmonics)\n",
        "\n",
        "Map.addLayer(fitted.select(['.*_fitted']),{'opacity':0},'Fitted CCDC',True);\n",
        "\n",
        "\n",
        "# Synthetic composites visualizing\n",
        "# Take common false color composite bands and visualize them for the next to the last year\n",
        "\n",
        "# First get the bands of predicted bands and then split off the name\n",
        "fittedBns = fitted.select(['.*_fitted']).first().bandNames()\n",
        "bns = fittedBns.map(lambda bn: ee.String(bn).split('_').get(0))\n",
        "\n",
        "# Filter down to the next to the last year and a summer date range\n",
        "compositeYear = endYear-1\n",
        "syntheticComposites = fitted.select(fittedBns,bns)\\\n",
        "    .filter(ee.Filter.calendarRange(compositeYear,compositeYear,'year'))\n",
        "    # .filter(ee.Filter.calendarRange(190,250)).first()\n",
        "\n",
        "# Visualize output as you would a composite\n",
        "getImagesLib.vizParamsFalse['dateFormat']='YYMMdd'\n",
        "getImagesLib.vizParamsFalse['advanceInterval']='day'\n",
        "Map.addTimeLapse(syntheticComposites,getImagesLib.vizParamsFalse,f'Synthetic Composite Time Lapse {compositeYear}')\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n",
        "\n",
        "#No layers will draw, but you can double click on map to see the fitted CCDC time series"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "83684512",
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "vscode": {
      "interpreter": {
        "hash": "369f2c481f4da34e4445cda3fffd2e751bd1c4d706f27375911949ba6bb62e1c"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
