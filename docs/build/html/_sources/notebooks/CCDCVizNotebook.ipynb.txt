{
  "cells": [
    {
      "attachments": {},
      "cell_type": "markdown",
      "id": "15b5b935",
      "metadata": {},
      "source": [
        "# CCDC Visualization Notebook\n",
        "\n",
        "* The Continuous Change Detection and Classification algorithm is a dense time-series temporal segmentation algorithm.\n",
        "* It takes every available observation and fits seasonal harmonic models to capture stable time periods. When a significant departure from the current model is detected, a break is placed. A new harmonic model is then fit once the change completes.\n",
        "* This notebook illustrates how to visualize and use the raw CCDC output created in the `CCDCWrapper.py` script. \n",
        "* It also shows how to combine two raw CCDC outputs that overlap using a linear feathering technique.\n",
        "\n",
        "\n",
        "\n",
        "   Copyright 2024 Ian Housman\n",
        "\n",
        "   Licensed under the Apache License, Version 2.0 (the \"License\");\n",
        "   you may not use this file except in compliance with the License.\n",
        "   You may obtain a copy of the License at\n",
        "\n",
        "       http://www.apache.org/licenses/LICENSE-2.0\n",
        "\n",
        "   Unless required by applicable law or agreed to in writing, software\n",
        "   distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "   See the License for the specific language governing permissions and\n",
        "   limitations under the License.\n",
        "\n",
        "[![github](https://img.shields.io/badge/-see%20sources-white?logo=github&labelColor=555)](https://github.com/gee-community/geeviz/blob/master/examples/CCDCVizNotebook.ipynb) \n",
        "[![github](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/gee-community/geeViz/blob/master/examples/CCDCVizNotebook.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f49d91eb",
      "metadata": {},
      "source": [
        "## Bring in CCDC data and set parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "e57ee268",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "done\n"
          ]
        }
      ],
      "source": [
        "#Example of how to visualize CCDC outputs using the Python visualization tools\n",
        "#Adds change products and fitted harmonics from CCDC output to the viewer\n",
        "#The general workflow for CCDC is to run the CCDCWrapper.py script, and then either utilize the harmonic model for a given date\n",
        "#or to use the breaks for change detection. All of this is demonstrated in this example\n",
        "####################################################################################################\n",
        "import os,sys\n",
        "sys.path.append(os.getcwd())\n",
        "\n",
        "#Module imports\n",
        "try:\n",
        "    import geeViz.getImagesLib as getImagesLib\n",
        "except:\n",
        "    !python -m pip install geeViz\n",
        "    import geeViz.getImagesLib as getImagesLib\n",
        "\n",
        "\n",
        "import geeViz.changeDetectionLib as changeDetectionLib\n",
        "ee = getImagesLib.ee\n",
        "Map = getImagesLib.Map\n",
        "Map.clearMap()\n",
        "####################################################################################################\n",
        "#Bring in ccdc image asset\n",
        "#This is assumed to be an image of arrays that is returned from the ee.Algorithms.TemporalSegmentation.Ccdc method\n",
        "ccdcImg = ee.ImageCollection('projects/lcms-292214/assets/CONUS-LCMS/Base-Learners/CCDC-Collection-1984-2022')\\\n",
        "          .select(['tStart','tEnd','tBreak','changeProb','red.*','nir.*','swir1.*','swir2.*','NDVI.*','NBR.*']).mosaic()\n",
        "\n",
        "\n",
        "#Specify which harmonics to use when predicting the CCDC model\n",
        "#CCDC exports the first 3 harmonics (1 cycle/yr, 2 cycles/yr, and 3 cycles/yr)\n",
        "#If you only want to see yearly patterns, specify [1]\n",
        "#If you would like a tighter fit in the predicted value, include the second or third harmonic as well [1,2,3]\n",
        "whichHarmonics = [1,2,3]\n",
        "\n",
        "#Whether to fill gaps between segments' end year and the subsequent start year to the break date\n",
        "fillGaps = True\n",
        "\n",
        "#Specify which band to use for loss and gain. \n",
        "#This is most important for the loss and gain magnitude since the year of change will be the same for all years\n",
        "changeDetectionBandName = 'NDVI'\n",
        "\n",
        "# Choose whether to show the most recent ('mostRecent') or highest magnitude ('highestMag') CCDC break\n",
        "sortingMethod = 'mostRecent'\n",
        "####################################################################################################\n",
        "#Pull out some info about the ccdc image\n",
        "startJulian = 1\n",
        "endJulian = 365\n",
        "startYear = 1984\n",
        "endYear = 2022\n",
        "print('done')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e7ef7655",
      "metadata": {},
      "source": [
        "## View and query raw CCDC outputs\n",
        "\n",
        "Notice the raw output is difficult to use directly. All of the information is here we need for change detection, seasonal synthetic compsites, and more"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "26bdb396",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Raw CCDC Output\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Starting local web server at: http://localhost:1231/geeView/\n",
            "HTTP server command: \"c:\\Users\\ihousman\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m http.server  1231\n",
            "Done\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZAtTHj3RFawevuI9hKa43eT9FQ1UDyrSyQOoqVGmRtWC8eM6KARg2J-Aeqp5GoK0Cpowd06ogIntFP0i9UbpGss1wnUSaBJiRL-JvXCgIQOo353wtPqf1c8cC1XKvpxY_QVzjeX85ghdkZihUSk6TZKO0MyVchO0vb0rmoaCgYKASESARESFQHGX2MiPUuspCWwMfEeWPFWdJcIBw0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZAtTHj3RFawevuI9hKa43eT9FQ1UDyrSyQOoqVGmRtWC8eM6KARg2J-Aeqp5GoK0Cpowd06ogIntFP0i9UbpGss1wnUSaBJiRL-JvXCgIQOo353wtPqf1c8cC1XKvpxY_QVzjeX85ghdkZihUSk6TZKO0MyVchO0vb0rmoaCgYKASESARESFQHGX2MiPUuspCWwMfEeWPFWdJcIBw0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x2952cf37ed0>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "Map.port = 1231\n",
        "#Add the raw array image\n",
        "Map.addLayer(ccdcImg,{},'Raw CCDC Output',True)\n",
        "Map.centerObject(ccdcImg)\n",
        "Map.turnOnInspector()\n",
        "Map.setCenter(-86.6,35,10)\n",
        "Map.view()\n",
        "#Double click on map to see raw CCDC output image array values\n",
        "#Notice it is difficult to interpret these values as a time series since only breaks and their respective harmonic models are stored"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ef69e26b",
      "metadata": {},
      "source": [
        "## Change detection using CCDC\n",
        "\n",
        "CCDC defines change as a significant departure from the current seasonal model. This is a good method for detecting conversion in land cover and/or land use. It does miss more subtle and/or long-term changes that may or may not result in a conversion of land cover and/or land use.\n",
        "\n",
        "Here, we provide a method to easily pull the change information from a raw CCDC output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "194029e4",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Loss Year\n",
            "Adding layer: Loss Mag\n",
            "Adding layer: Gain Year\n",
            "Adding layer: Gain Mag\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:1231/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZC1Ko3UnQzOS0yVlomGPG-gXsLr3hSbcvOtpOPAbweZfOKjr_AOFVJKsWkc4QbyRCikS1VZ4-NA7SPSEVRtok3s1U8PqE8V2YlL-13NyhbX40bmowjokjtZPx_4gOY9_1y-6h-NIartw1yVAvSvFf_XPueFg1lVGNAuv5MaCgYKAVMSARESFQHGX2MiIi1SnuadItfSpeqOQvQw1Q0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZC1Ko3UnQzOS0yVlomGPG-gXsLr3hSbcvOtpOPAbweZfOKjr_AOFVJKsWkc4QbyRCikS1VZ4-NA7SPSEVRtok3s1U8PqE8V2YlL-13NyhbX40bmowjokjtZPx_4gOY9_1y-6h-NIartw1yVAvSvFf_XPueFg1lVGNAuv5MaCgYKAVMSARESFQHGX2MiIi1SnuadItfSpeqOQvQw1Q0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x2952cf46990>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "#We will not look at more useful ways of visualizing CCDC outputs\n",
        "#First, we will extract the change years and magnitude\n",
        "changeObj = changeDetectionLib.ccdcChangeDetection(ccdcImg,changeDetectionBandName)\n",
        "Map.addLayer(changeObj[sortingMethod]['loss']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.lossYearPalette},'Loss Year')\n",
        "Map.addLayer(changeObj[sortingMethod]['loss']['mag'],{'min':-0.5,'max':-0.1,'palette':changeDetectionLib.lossMagPalette},'Loss Mag',False)\n",
        "Map.addLayer(changeObj[sortingMethod]['gain']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.gainYearPalette},'Gain Year')\n",
        "Map.addLayer(changeObj[sortingMethod]['gain']['mag'],{'min':0.05,'max':0.2,'palette':changeDetectionLib.gainMagPalette},'Gain Mag',False)\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n",
        "#Double click on map to see raw years of loss and gain breaks\n",
        "#Notice as you zoom in the layers change since GEE is processing outputs at a given pyramid level"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "019df112",
      "metadata": {},
      "source": [
        "## Create fitted time series \n",
        "\n",
        "This example shows a common use of CCDC - to create images at some set time interval\n",
        "\n",
        "Specifically, this example is showing a time series for every 0.1 of a year\n",
        "\n",
        "View the time lapse to see the green-up and brown-down over a growing season"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "4a8031fe",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Fitted CCDC\n",
            "Adding layer: Synthetic Composite Time Lapse 2021\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:1231/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZAfStv0wHfQ1B_cHdomQAvSXnIkthwptm1W3wSHeeXGip11eZ9ukuCTShfb-ZGggYwemvX73S887-cqFqtNV_odRSd_iApHU4yDRrOxSkUWzuL8DvaPOlMxNslQfW9Ct7ztFIL_ewIIzi6cDbDowBhtMMfpDU0pYNBIoiUaCgYKAWQSARESFQHGX2Mi-kD5cbYGXXP4O5Kwr0E_mA0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZAfStv0wHfQ1B_cHdomQAvSXnIkthwptm1W3wSHeeXGip11eZ9ukuCTShfb-ZGggYwemvX73S887-cqFqtNV_odRSd_iApHU4yDRrOxSkUWzuL8DvaPOlMxNslQfW9Ct7ztFIL_ewIIzi6cDbDowBhtMMfpDU0pYNBIoiUaCgYKAWQSARESFQHGX2Mi-kD5cbYGXXP4O5Kwr0E_mA0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x2952b22c250>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "#Apply the CCDC harmonic model across a time series\n",
        "#First get a time series of time images \n",
        "yearImages = changeDetectionLib.simpleGetTimeImageCollection(startYear,endYear,startJulian,endJulian,0.1)\n",
        "\n",
        "#Then predict the CCDC models\n",
        "fitted = changeDetectionLib.predictCCDC(ccdcImg,yearImages,fillGaps,whichHarmonics)\n",
        "\n",
        "Map.addLayer(fitted.select(['.*_fitted']),{'opacity':0},'Fitted CCDC',True)\n",
        "\n",
        "\n",
        "# Synthetic composites visualizing\n",
        "# Take common false color composite bands and visualize them for the next to the last year\n",
        "\n",
        "# First get the bands of predicted bands and then split off the name\n",
        "fittedBns = fitted.select(['.*_fitted']).first().bandNames()\n",
        "bns = fittedBns.map(lambda bn: ee.String(bn).split('_').get(0))\n",
        "\n",
        "# Filter down to the next to the last year and a summer date range\n",
        "compositeYear = endYear-1\n",
        "syntheticComposites = fitted.select(fittedBns,bns)\\\n",
        "    .filter(ee.Filter.calendarRange(compositeYear,compositeYear,'year'))\n",
        "    # .filter(ee.Filter.calendarRange(190,250)).first()\n",
        "\n",
        "# Visualize output as you would a composite\n",
        "getImagesLib.vizParamsFalse['dateFormat']='YY-MM-dd'\n",
        "getImagesLib.vizParamsFalse['advanceInterval']='day'\n",
        "Map.addTimeLapse(syntheticComposites,getImagesLib.vizParamsFalse,f'Synthetic Composite Time Lapse {compositeYear}')\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n",
        "\n",
        "#No layers will draw, but you can double click on map to see the fitted CCDC time series"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8d57add2",
      "metadata": {},
      "source": [
        "## Combining CCDC outputs\n",
        "\n",
        "CCDC is expensive to run. It also runs out of memory when run over many observations. Since it initializes each pixel with global values, in its current form, it is not easy to pick up an existing CCDC output and extend it further in time. \n",
        "\n",
        "In order to avoid completely re-running CCDC every year, starting in 2023, we developed a method to combine two overlapping CCDC runs into a single time series otuput\n",
        "\n",
        "This method uses a basic linearly weighted feathering techinque. Coefficients from two overlapping runs are averaged with a linear weighting from 1-0 and 0-1 for the early and late outputs respectively over a specified overlapping period\n",
        "\n",
        "The example below will demonstrate how to combine two CCDC outputs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "83684512",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Combined CCDC\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:1231/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZBh2uA3pK6W_QM5fBogIflJRhg25ewKoA3xsaR0OKftli_0AWaSveD2MuiMLrHlCC6ZpXiWFqGMihCwO5b8_GZeCZPh_3guT3Sl5GrfKS_mqn9ooW1rPx0RC8S4hDgcuU3_2rXmVvizKWDv_b1lXrZcP_tc3ggiDUxWuAwaCgYKARQSARESFQHGX2Mi31I_AAI_7LPZrWZ78tsVHg0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:1231/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZBh2uA3pK6W_QM5fBogIflJRhg25ewKoA3xsaR0OKftli_0AWaSveD2MuiMLrHlCC6ZpXiWFqGMihCwO5b8_GZeCZPh_3guT3Sl5GrfKS_mqn9ooW1rPx0RC8S4hDgcuU3_2rXmVvizKWDv_b1lXrZcP_tc3ggiDUxWuAwaCgYKARQSARESFQHGX2Mi31I_AAI_7LPZrWZ78tsVHg0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x2952c9a2210>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "# Bring in second collection\n",
        "ccdcBandNames = [\n",
        "    \"tStart\",\n",
        "    \"tEnd\",\n",
        "    \"tBreak\",\n",
        "    \"changeProb\",\n",
        "    'swir1.*',\n",
        "    \"NDVI.*\",\n",
        "]\n",
        "ccdcImg1 = ee.ImageCollection(\"projects/lcms-292214/assets/CONUS-LCMS/Base-Learners/CCDC-Collection-1984-2022\").select(ccdcBandNames).mosaic()\n",
        "\n",
        "ccdcImg2 = ee.ImageCollection(\"projects/lcms-292214/assets/CONUS-LCMS/Base-Learners/CCDC-Feathered-Collection\").select(ccdcBandNames).mosaic()\n",
        "\n",
        "\n",
        "# Set years to include union of all years of the two CCDC outputs\n",
        "startYear = 1984\n",
        "endYear = 2024\n",
        "\n",
        "# Important parameters - when to feather the two together\n",
        "# Has to fall within the overlapping period of the two runs\n",
        "# In general, the longer the period, the better. \n",
        "# Keeping it away from the very first and very last year of either of the runs is a good idea\n",
        "featheringStartYear = 2014\n",
        "featheringEndYear = 2021\n",
        "\n",
        "# Set a date range and date step (proportion of year - 1 = annual, 0.1 = 10 images per year)\n",
        "# 245 is a good startJulian and endJulian if step = 1. Set startJulian to 1 and endJulian to 365 and step to 0.1 to see seasonality\n",
        "startJulian = 245\n",
        "endJulian = 245\n",
        "step = 1\n",
        "\n",
        "# Choose which band to show\n",
        "fitted_band = \"NDVI_CCDC_fitted\"\n",
        "\n",
        "\n",
        "# Get fitted for early, late, and combined\n",
        "# The predictCCDC function will automatically feather two raw CCDC images together if two are provided\n",
        "# If a single image is provided, no feathering will be performed\n",
        "timeImgs = changeDetectionLib.simpleGetTimeImageCollection(startYear, endYear, startJulian, endJulian, step)\n",
        "fittedFeathered =changeDetectionLib.predictCCDC([ccdcImg1,ccdcImg2],timeImgs,fillGaps,whichHarmonics,featheringStartYear,featheringEndYear)\n",
        "fittedEarly =changeDetectionLib.predictCCDC(ccdcImg1,timeImgs,fillGaps,whichHarmonics)\n",
        "fittedLate =changeDetectionLib.predictCCDC(ccdcImg2,timeImgs,fillGaps,whichHarmonics)\n",
        "\n",
        "# Give each unique band names\n",
        "fittedFeathered = fittedFeathered.select([fitted_band],[f'{fitted_band}_Combined'])\n",
        "fittedEarly = fittedEarly.select([fitted_band],[f'{fitted_band}_Early'])\n",
        "fittedLate = fittedLate.select([fitted_band],[f'{fitted_band}_Late'])\n",
        "\n",
        "# Join all 3\n",
        "joined = fittedEarly.linkCollection(fittedLate,[f'{fitted_band}_Late'],None,'system:time_start')\n",
        "joined = joined.linkCollection(fittedFeathered,[f'{fitted_band}_Combined'],None,'system:time_start')\n",
        "\n",
        "# Show on map\n",
        "Map.addLayer(joined, {'reducer':ee.Reducer.mean(),'min':0.3,'max':0.8}, \"Combined CCDC\", True)\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e501ba81",
      "metadata": {},
      "source": [
        "## Combining CCDC Outputs for Change Detection\n",
        "\n",
        "Two CCDC outputs can also be combined for change detection\n",
        "The two outputs are concatenated, with the most recent and most probable from either input considered for change.\n",
        "\n",
        "Both inputs much have non-null values for a pixel to be considered for change detection. Any pixel with a null value in either input image will result in that pixel always being null for change."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "121eda59",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Adding layer: Loss Year Combined\n",
            "Adding layer: Loss Mag Combined\n",
            "Adding layer: Gain Year Combined\n",
            "Adding layer: Gain Mag Combined\n",
            "Starting webmap\n",
            "Using default refresh token for geeView\n",
            "Local web server at: http://localhost:8001/geeView/ already serving.\n",
            "cwd a:\\GEE\\gee_py_modules_package\\geeViz\\examples\n",
            "geeView URL: http://localhost:8001/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZBr9o4QCr0_2wM6o36L_3Tp36ZFWxRDSmjai_9ChFEFQSNwYcwe3MB3M29gzBl228iWzrZQaCtGJLA-BYj0j1tYyzs-Y7OgTU7qgEZL-IacVbQx8FQUCNNU4bJeQAnF0x-Huf2rtDFFD1qcVjet1hvEl1KAGnMLEoNt9y8aCgYKAdQSARESFQHGX2MiFyLq6iGmT8gP2wJ-KmZ-dQ0178\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"525px\"\n",
              "            src=\"http://localhost:8001/geeView/?projectID=lcms-292214&accessToken=ya29.a0AeDClZBr9o4QCr0_2wM6o36L_3Tp36ZFWxRDSmjai_9ChFEFQSNwYcwe3MB3M29gzBl228iWzrZQaCtGJLA-BYj0j1tYyzs-Y7OgTU7qgEZL-IacVbQx8FQUCNNU4bJeQAnF0x-Huf2rtDFFD1qcVjet1hvEl1KAGnMLEoNt9y8aCgYKAdQSARESFQHGX2MiFyLq6iGmT8gP2wJ-KmZ-dQ0178\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x2952c3c9110>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "Map.clearMap()\n",
        "\n",
        "\n",
        "changeObjCombined = changeDetectionLib.ccdcChangeDetection([ccdcImg1,ccdcImg2],changeDetectionBandName,startYear,endYear)\n",
        "s\n",
        "Map.addLayer(changeObjCombined[sortingMethod]['loss']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.lossYearPalette},'Loss Year Combined')\n",
        "Map.addLayer(changeObjCombined[sortingMethod]['loss']['mag'],{'min':-0.5,'max':-0.1,'palette':changeDetectionLib.lossMagPalette},'Loss Mag Combined',False)\n",
        "Map.addLayer(changeObjCombined[sortingMethod]['gain']['year'],{'min':startYear,'max':endYear,'palette':changeDetectionLib.gainYearPalette},'Gain Year Combined')\n",
        "Map.addLayer(changeObjCombined[sortingMethod]['gain']['mag'],{'min':0.05,'max':0.2,'palette':changeDetectionLib.gainMagPalette},'Gain Mag Combined',False)\n",
        "\n",
        "\n",
        "Map.turnOnInspector()\n",
        "Map.view()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "vscode": {
      "interpreter": {
        "hash": "369f2c481f4da34e4445cda3fffd2e751bd1c4d706f27375911949ba6bb62e1c"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
